# yamllint disable rule:line-length
---
name: package

# yamllint disable-line rule:truthy
on:
  push:
    tags:
      - "v*.*.*"
env:
  MASTER_KEY: master.key
  INSTALL_DIR: C:\Users\runneradmin\eSignerCKA
  MASTER_KEY_FILE: C:\Users\runneradmin\eSignerCKA\master.key

jobs:
  package:
      strategy:
        matrix:
          go-version: [1.18]
          node-version: [16]
          os: [windows-latest]
      runs-on: ${{ matrix.os }}
      steps:
        - name: Install Go
          uses: actions/setup-go@v2
          with:
            go-version: ${{ matrix.go-version }}

        - name: Checkout code
          uses: actions/checkout@v2

        - name: Install linux dependencies
          if: matrix.os == 'ubuntu-latest'
          run: sudo apt-get update -y && sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev build-essential pkg-config gcc-mingw-w64 zip

        - name: Use Node.js ${{ matrix.node-version }}
          uses: actions/setup-node@v3
          with:
            node-version: ${{ matrix.node-version }}

        - name: Install wails
          run: go install github.com/wailsapp/wails/v2/cmd/wails@v2.3.1

        - name: Build package windows
          if: matrix.os == 'windows-latest'
          run: |
            $GP = (go env GOPATH)
            $env:path = "$env:path;$GP\bin"
            echo "building on ${{ matrix.os }}"
            echo "${{ env.GITHUB_REF }}"
            echo "${{ env.GITHUB_HEAD_REF }}"
            choco install mingw
            wails build -platform windows/amd64 -clean -ldflags "-s -w -X github.com/SafetyCulture/safetyculture-exporter-ui/internal/version.version=${{ github.ref_name }}" -skipbindings

        - name: Sign binary
          if: matrix.os == 'windows-latest'
          run: |
            Invoke-WebRequest -OutFile eSigner_CKA_1.0.3.zip "https://www.ssl.com/download/ssl-com-esigner-cka-1-0-3"
            Expand-Archive -Force eSigner_CKA_1.0.3.zip
            Remove-Item eSigner_CKA_1.0.3.zip
            Move-Item -Destination "eSigner_CKA_1.0.3.exe" -Path "eSigner_CKA_1.0.3\SSL.COM eSigner CKA_1.0.3.exe"
            New-Item -ItemType Directory -Force -Path ${{ env.INSTALL_DIR }}
            ./eSigner_CKA_1.0.3.exe /CURRENTUSER /VERYSILENT /SUPPRESSMSGBOXES /DIR=${{ env.INSTALL_DIR }} | Out-Null
            ${{ env.INSTALL_DIR }}/eSignerCKATool.exe config -mode ${{ secrets.MODE }} -user ${{ secrets.USERNAME }} -pass ${{ secrets.PASSWORD }} -totp ${{ secrets.TOTP_SECRET }} -key ${{ env.MASTER_KEY_FILE }} -r
            ${{ env.INSTALL_DIR }}/eSignerCKATool.exe unload
            ${{ env.INSTALL_DIR }}/eSignerCKATool.exe load
            $CodeSigningCert = Get-ChildItem Cert:\CurrentUser\My -CodeSigningCert | Select-Object -First 1
            echo "THUMBPRINT=$($CodeSigningCert.Thumbprint)" >> $env:GITHUB_ENV
            Set-Location "C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/"
            .\signtool.exe sign /fd sha256 /tr http://ts.ssl.com /td sha256 /sha1 $($CodeSigningCert.Thumbprint) "D:\a\safetyculture-exporter-ui\safetyculture-exporter-ui\build\bin\safetyculture-exporter.exe"
            Set-Location "D:\a\safetyculture-exporter-ui\safetyculture-exporter-ui"
            Copy-Item -Path .\build\bin\safetyculture-exporter.exe -Destination exporter-windows-x86_64.exe


        - name: Build package linux
          if: matrix.os == 'ubuntu-latest'
          run: |
            export PATH=$PATH:$(go env GOPATH)/bin
            echo "building on ${{ matrix.os }}"
            echo ${{ env.GITHUB_REF }}
            echo ${{ env.GITHUB_HEAD_REF }}
            VERSION=${{ github.ref_name }} ./scripts/build-linux.sh

        - name: Build package macos
          if: matrix.os == 'macos-latest'
          run: |
            VERSION=${{ github.ref_name }} ./scripts/build-macos.sh

        - name: Upload artifacts macOS
          if: matrix.os == 'macos-latest'
          uses: actions/upload-artifact@v2
          with:
            name: exporter-macos
            path: exporter-darwin-*.zip

        - name: Upload artifacts linux
          if: matrix.os == 'ubuntu-latest'
          uses: actions/upload-artifact@v2
          with:
            name: exporter-linux
            path: exporter-linux-amd64.tar.gz

        - name: Upload artifacts windows
          if: matrix.os == 'windows-latest'
          uses: actions/upload-artifact@v2
          with:
            name: exporter-windows
            path: exporter-windows-x86_64.exe

  release:
    runs-on: ubuntu-latest
    needs: package
    steps:
      - name: Download package windows
        uses: actions/download-artifact@v2
        with:
          name: exporter-windows

      - name: Download package linux
        uses: actions/download-artifact@v2
        with:
          name: exporter-linux

      - name: Download package macos
        uses: actions/download-artifact@v2
        with:
          name: exporter-macos

      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          artifacts: "exporter*.zip,exporter*.tar.gz,exporter-windows-x86_64.exe"
          allowUpdates: true
