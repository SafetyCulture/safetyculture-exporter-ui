# yamllint disable rule:line-length
---
name: package

# yamllint disable-line rule:truthy
on:
  push:
    tags:
      - "v*.*.*"

jobs:
  package:
      strategy:
        matrix:
          go-version: [1.18]
          node-version: [16]
          os: [macos-latest]
      runs-on: ${{ matrix.os }}
      steps:
        - name: Install Go
          uses: actions/setup-go@v2
          with:
            go-version: ${{ matrix.go-version }}

        - name: Checkout code
          uses: actions/checkout@v2

        - name: Install linux dependencies
          if: matrix.os == 'ubuntu-latest'
          run: sudo apt-get update -y && sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev build-essential pkg-config gcc-mingw-w64 zip

        - name: Use Node.js ${{ matrix.node-version }}
          uses: actions/setup-node@v3
          with:
            node-version: ${{ matrix.node-version }}

        - name: Install wails
          run: go install github.com/wailsapp/wails/v2/cmd/wails@v2.3.1

        - name: Build package windows
          if: matrix.os == 'windows-latest'
          run: |
            $GP = (go env GOPATH)
            $env:path = "$env:path;$GP\bin"
            echo "building on ${{ matrix.os }}"
            echo "${{ env.GITHUB_REF }}"
            echo "${{ env.GITHUB_HEAD_REF }}"
            choco install mingw
            wails build -platform windows/amd64 -clean -ldflags "-s -w -X github.com/SafetyCulture/safetyculture-exporter-ui/internal/version.version=${{ github.ref_name }}" -skipbindings

        - name: Sign Windows Binary
          if: matrix.os == 'windows-latest'
          run: |
            echo "Creating certificate file"
            New-Item -ItemType directory -Path certificate
            Set-Content -Path certificate\certificate.txt -Value "${{ secrets.WIN_SIGNING_CERT }}"
            certutil -decode certificate\certificate.txt certificate\certificate.pfx
            echo "Signing binary"
            & "C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe" sign /fd sha256 /tr http://ts.ssl.com /f certificate\certificate.pfx /p "${{ secrets.WIN_SIGNING_CERT_PASSWORD }}" .\build\bin\safetyculture-exporter.exe
            Copy-Item -Path .\build\bin\safetyculture-exporter.exe -Destination .\exporter-windows-x86_64.exe

        - name: Build package linux
          if: matrix.os == 'ubuntu-latest'
          run: |
            export PATH=$PATH:$(go env GOPATH)/bin
            echo "building on ${{ matrix.os }}"
            echo ${{ env.GITHUB_REF }}
            echo ${{ env.GITHUB_HEAD_REF }}
            wails build -platform linux/amd64 -clean -ldflags "-s -w -X github.com/SafetyCulture/safetyculture-exporter-ui/internal/version.version=${{ github.ref_name }}"
            tar -czf exporter-linux-amd64.tar.gz ./build/bin/safetyculture-exporter

        - name: Build package macos
          if: matrix.os == 'macos-latest'
          run: |
            export PATH=${PATH}:`go env GOPATH`/bin
            wails build -platform darwin/amd64 -clean -ldflags "-s -w -X github.com/SafetyCulture/safetyculture-exporter-ui/internal/version.version=${VERSION}"
            
            # ditto -c -k --keepParent ./build/bin/safetyculture-exporter.app ./exporter-darwin-amd64.zip
            # rm -rf build/bin/SafetyCulture Exporter.app

        - name: MacOS Codesign
          if: matrix.os == 'macos-latest'
          uses: apple-actions/import-codesign-certs@v2
          with: 
            p12-file-base64: ${{ secrets.MAC_SIGNING_CERT }}
            p12-password: ${{ secrets.MAC_SIGNING_CERT_PASSWORD }}

        - name: zip macOS app
          if: matrix.os == 'macos-latest'
          run: |
            ditto -c -k --keepParent ./build/bin/safetyculture-exporter.app ./safetyculture-exporter.zip

        - name: Apple Notarisation
          if: matrix.os == 'macos-latest'
          uses: love-actions/xcode-notarizer@v1.0.2
          with:
            product-path: "safetyculture-exporter.zip"
            key-content: ${{ secrets.APPSTORE_API_KEY }}
            key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
            issuer-id: ${{ secrets.APPSTORE_API_ISSUER_ID }}
            staple: false
        
        - name: Upload artifacts macOS
          if: matrix.os == 'macos-latest'
          uses: actions/upload-artifact@v2
          with:
            name: exporter-macos
            path: safetyculture-*.zip

        - name: Upload artifacts linux
          if: matrix.os == 'ubuntu-latest'
          uses: actions/upload-artifact@v2
          with:
            name: exporter-linux
            path: exporter-linux-amd64.tar.gz

        - name: Upload artifacts windows
          if: matrix.os == 'windows-latest'
          uses: actions/upload-artifact@v2
          with:
            name: exporter-windows
            path: exporter-windows-x86_64.exe

  release:
    runs-on: ubuntu-latest
    needs: package
    steps:
      - name: Download package windows
        uses: actions/download-artifact@v2
        with:
          name: exporter-windows

      - name: Download package linux
        uses: actions/download-artifact@v2
        with:
          name: exporter-linux

      - name: Download package macos
        uses: actions/download-artifact@v2
        with:
          name: exporter-macos

      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          artifacts: "safetyculture-*.zip, exporter-linux-amd64.tar.gz,exporter-windows-x86_64.exe"
          allowUpdates: true
          prerelease: true
          makeLatest: false
